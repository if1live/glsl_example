CMAKE_MINIMUM_REQUIRED( VERSION 2.4 )
PROJECT( "haruna" )

if(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 NEW)
endif(COMMAND CMAKE_POLICY)

# Global Setup
ADD_DEFINITIONS( /D_USE_MATH_DEFINES )
IF (MSVC)
SET_PROPERTY( GLOBAL
  PROPERTY
    COMPILE_FLAGS
      "/ZI")
ENDIF (MSVC)
SET( CMAKE_DEBUG_POSTFIX "d" )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/bin" )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/lib" )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/lib" )
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    MESSAGE( ${OUTPUTCONFIG} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_LIST_DIR}/lib )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_LIST_DIR}/lib )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}" )

# disable some warning
# http://www.cmake.org/pipermail/cmake/2008-October/024476.html
ADD_DEFINITIONS( "/wd4996 /wd4819" )

# GLEW
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glew/include" )
LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glew/lib" )

# GLFW
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glfw/include" )
LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glfw/lib-msvc110" )

# GLM
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glm" )

# LODEPNG
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/lodepng" )

# MSVC PrecompiledHeader 
MACRO( MSVC_SET_PCH Target PrecompiledHeader PrecompiledSource)
  IF( MSVC )
    SET(PrecompiledBinary "\$(IntDir)\$(TargetName).pch")
    SET(Sources ${${SourcesVar}})
    GET_FILENAME_COMPONENT(PrecompiledBasename
       ${PrecompiledHeader} NAME)

    SET_SOURCE_FILES_PROPERTIES(${PrecompiledSource}
      PROPERTIES
        COMPILE_FLAGS
          "/Yc\"${PrecompiledBasename}\" /Fp\"${PrecompiledBinary}\""
        OBJECT_OUTPUTS "${PrecompiledBinary}") 
    SET_TARGET_PROPERTIES(${Target}
      PROPERTIES
        COMPILE_FLAGS
          "/Yu\"${PrecompiledBasename}\"")
  ENDIF( MSVC )
ENDMACRO( MSVC_SET_PCH )

# Haruna library
FUNCTION( ADD_HARUNA_LIBRARY )

  FILE( GLOB HARUNA_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/haruna/*.*" )
  FILE( GLOB HARUNA_GL_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/haruna/gl/*.*" )
  FILE( GLOB HARUNA_SORA_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/sora/*.*" )
  FILE( GLOB HARUNA_LODEPNG_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/lodepng/*.*" )
  SET( HARUNA_SUPPORT_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.h"
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.cpp")

  LIST( APPEND SRC_FILES
    ${HARUNA_SRC_FILES}
    ${HARUNA_GL_SRC_FILES}
    ${HARUNA_SORA_SRC_FILES}
    ${HARUNA_SUPPORT_SRC_FILES}
	${HARUNA_LODEPNG_SRC_FILES} )

  ADD_LIBRARY( haruna ${SRC_FILES} )

  MSVC_SET_PCH( haruna
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.h"
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.cpp")

  TARGET_LINK_LIBRARIES( haruna
    GLFW
    glew32
    opengl32)

  SOURCE_GROUP( haruna FILES ${HARUNA_SRC_FILES} )
  SOURCE_GROUP( haruna\\gl FILES ${HARUNA_GL_SRC_FILES} )
  SOURCE_GROUP( sora FILES ${HARUNA_SORA_SRC_FILES} )
  SOURCE_GROUP( sdk\\lodepng FILES ${HARUNA_LODEPNG_SRC_FILES} )
  SOURCE_GROUP( support FILES ${HARUNA_SUPPORT_SRC_FILES} )
  

ENDFUNCTION( ADD_HARUNA_LIBRARY)


# Haruna executable example
FUNCTION( ADD_HARUNA_EXE )
  SET( CUR_ROOT "${CMAKE_CURRENT_LIST_DIR}/haruna_exe" )
  INCLUDE_DIRECTORIES( "${CUR_ROOT}" )

  FILE( GLOB HARUNA_EXE_EXAMPLE_SRC_FILES
    "${CUR_ROOT}/*.*" )

  LIST( APPEND HARUNA_EXE_SRC_FILES
    ${HARUNA_EXE_EXAMPLE_SRC_FILES})

  ADD_EXECUTABLE( haruna_exe ${HARUNA_EXE_SRC_FILES} )
 
  TARGET_LINK_LIBRARIES( haruna_exe haruna )

  ADD_DEPENDENCIES( haruna_exe haruna )

  #SOURCE_GROUP( example FILES ${HARUNA_EXE_EXAMPLE_SRC_FILES} )

ENDFUNCTION( ADD_HARUNA_EXE )


ADD_HARUNA_LIBRARY()


IF( ${CMAKE_CURRENT_LIST_DIR} STREQUAL ${CMAKE_SOURCE_DIR} )

  ADD_HARUNA_EXE()
  
ENDIF()

